package models.dal

import models.QualityMetrics
import slick.jdbc.PostgresProfile.api.*

/**
 * Represents a database table for storing quality metrics associated with genomic regions.
 *
 * This table stores metrics collected during genomic data analysis, including details such as sequence coverage,
 * mapping quality, and the number of callable bases. Each record corresponds to a specific genomic region defined
 * by a contig and a start-end position range.
 *
 * Columns:
 * - `id`: Auto-incrementing primary key for identifying a record.
 * - `contigId`: Identifier for the associated contig or reference sequence.
 * - `startPosition`: The starting position of the genomic region in base-pair coordinates.
 * - `endPosition`: The ending position of the genomic region in base-pair coordinates.
 * - `numReads`: Total number of reads covering the genomic region.
 * - `refN`: Count of reference bases that are 'N' within this region.
 * - `noCov`: Number of bases within the region that have no coverage.
 * - `lowCov`: Number of bases within the region with coverage below a threshold.
 * - `excessiveCov`: Number of bases within the region with excessively high coverage.
 * - `poorMQ`: Number of bases in the region with low mapping quality scores.
 * - `callable`: Number of bases deemed callable based on quality and coverage thresholds.
 * - `covPercent`: Percentage of the region covered by sequencing reads.
 * - `meanDepth`: Average depth of coverage across the region.
 * - `meanMQ`: Average mapping quality for the reads within the region.
 * - `sequenceFileId`: Identifier linking this record to a specific sequencing file.
 *
 * Mapping:
 * This table is mapped to the `QualityMetrics` case class, enabling programmatic access and retrieval of data.
 *
 * Additional details:
 * - The `id` column is autogenerated and serves as the unique identifier for each record.
 * - Most metrics are directly related to the quality of sequencing data for a specific genomic region.
 */
class QualityMetricsTable(tag: Tag) extends Table[QualityMetrics](tag, "quality_metrics") {
  def id = column[Int]("id", O.PrimaryKey, O.AutoInc)

  def contigId = column[Int]("contig_id")

  def startPosition = column[Int]("start_pos")

  def endPosition = column[Int]("end_pos")

  def numReads = column[Int]("num_reads")

  def refN = column[Int]("ref_n")

  def noCov = column[Int]("no_cov")

  def lowCov = column[Int]("low_cov")

  def excessiveCov = column[Int]("excessive_cov")

  def poorMQ = column[Int]("poor_mq")

  def callable = column[Int]("callable")

  def covPercent = column[Double]("cov_percent")

  def meanDepth = column[Double]("mean_depth")

  def meanMQ = column[Double]("mean_mq")

  def sequenceFileId = column[Int]("sequence_file_id")

  def * = (id.?, contigId, startPosition, endPosition, numReads, refN, noCov, lowCov, excessiveCov, poorMQ, callable, covPercent, meanDepth, meanMQ, sequenceFileId).mapTo[QualityMetrics]
}
